import{y as p,b as d,c as i}from"./index-c34e7bd4.js";class m{constructor(){this.supportCascades=!1}loadCubeData(c,t,n,s,r){if(Array.isArray(c))return;const e=t.getEngine().getCaps(),o={supportedCompressionFormats:{etc1:!!e.etc1,s3tc:!!e.s3tc,pvrtc:!!e.pvrtc,etc2:!!e.etc2,astc:!!e.astc,bc7:!!e.bptc}};p(c,o).then(a=>{const l=a.fileInfo.images[0].levels.length>1&&t.generateMipMaps;d(t,a),t.getEngine()._setCubeMapTextureParams(t,l),t.isReady=!0,t.onLoadedObservable.notifyObservers(t),t.onLoadedObservable.clear(),s&&s()}).catch(a=>{i.Warn("Failed to transcode Basis file, transcoding may not be supported on this device"),t.isReady=!0,r&&r(a)})}loadData(c,t,n){const s=t.getEngine().getCaps(),r={supportedCompressionFormats:{etc1:!!s.etc1,s3tc:!!s.s3tc,pvrtc:!!s.pvrtc,etc2:!!s.etc2,astc:!!s.astc,bc7:!!s.bptc}};p(c,r).then(e=>{const o=e.fileInfo.images[0].levels[0],a=e.fileInfo.images[0].levels.length>1&&t.generateMipMaps;n(o.width,o.height,a,e.format!==-1,()=>{d(t,e)})}).catch(e=>{i.Warn("Failed to transcode Basis file, transcoding may not be supported on this device"),i.Warn(`Failed to transcode Basis file: ${e}`),n(0,0,!1,!1,()=>{},!0)})}}export{m as _BasisTextureLoader};
