import{B as n,A as u}from"./index-c34e7bd4.js";class C{constructor(){this.supportCascades=!0}loadCubeData(p,a,r,t){const o=a.getEngine();let e,i=!1,m=1e3;if(Array.isArray(p))for(let s=0;s<p.length;s++){const h=p[s];e=n.GetDDSInfo(h),a.width=e.width,a.height=e.height,i=(e.isRGB||e.isLuminance||e.mipmapCount>1)&&a.generateMipMaps,o._unpackFlipY(e.isCompressed),n.UploadDDSLevels(o,a,h,e,i,6,-1,s),!e.isFourCC&&e.mipmapCount===1?o.generateMipMapsForCubemap(a):m=e.mipmapCount-1}else{const s=p;e=n.GetDDSInfo(s),a.width=e.width,a.height=e.height,r&&(e.sphericalPolynomial=new u),i=(e.isRGB||e.isLuminance||e.mipmapCount>1)&&a.generateMipMaps,o._unpackFlipY(e.isCompressed),n.UploadDDSLevels(o,a,s,e,i,6),!e.isFourCC&&e.mipmapCount===1?o.generateMipMapsForCubemap(a,!1):m=e.mipmapCount-1}o._setCubeMapTextureParams(a,i,m),a.isReady=!0,a.onLoadedObservable.notifyObservers(a),a.onLoadedObservable.clear(),t&&t({isDDS:!0,width:a.width,info:e,data:p,texture:a})}loadData(p,a,r){const t=n.GetDDSInfo(p),o=(t.isRGB||t.isLuminance||t.mipmapCount>1)&&a.generateMipMaps&&Math.max(t.width,t.height)>>t.mipmapCount-1===1;r(t.width,t.height,o,t.isFourCC,()=>{n.UploadDDSLevels(a.getEngine(),a,p,t,o,1)})}}export{C as _DDSTextureLoader};
